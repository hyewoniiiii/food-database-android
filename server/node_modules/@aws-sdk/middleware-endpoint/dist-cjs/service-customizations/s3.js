"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.s3Customizations = void 0;
const adaptors_1 = require("../adaptors");
const s3Customizations = async (config, instructions, args, context) => {
    var _a;
    const endpoint = context.endpointV2;
    const bucket = ((_a = args.input) === null || _a === void 0 ? void 0 : _a.Bucket) || void 0;
    if (!endpoint || !bucket) {
        return;
    }
    if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1) {
        context.endpointV2 = await (0, adaptors_1.getEndpointFromInstructions)(args.input, {
            getEndpointParameterInstructions: () => instructions,
        }, { ...config, forcePathStyle: true });
    }
};
exports.s3Customizations = s3Customizations;
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
exports.DOT_PATTERN = /\./;
exports.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
