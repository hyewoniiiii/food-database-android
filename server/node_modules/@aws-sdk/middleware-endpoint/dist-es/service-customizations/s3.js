import { __assign, __awaiter, __generator } from "tslib";
import { getEndpointFromInstructions } from "../adaptors";
export var s3Customizations = function (config, instructions, args, context) { return __awaiter(void 0, void 0, void 0, function () {
    var endpoint, bucket, _a;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                endpoint = context.endpointV2;
                bucket = ((_b = args.input) === null || _b === void 0 ? void 0 : _b.Bucket) || void 0;
                if (!endpoint || !bucket) {
                    return [2];
                }
                if (!(!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1)) return [3, 2];
                _a = context;
                return [4, getEndpointFromInstructions(args.input, {
                        getEndpointParameterInstructions: function () { return instructions; },
                    }, __assign(__assign({}, config), { forcePathStyle: true }))];
            case 1:
                _a.endpointV2 = _c.sent();
                _c.label = 2;
            case 2: return [2];
        }
    });
}); };
var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
var DOTS_PATTERN = /\.\./;
export var DOT_PATTERN = /\./;
export var S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
export var isDnsCompatibleBucketName = function (bucketName) {
    return DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
};
