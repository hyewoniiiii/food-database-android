import { __assign, __awaiter, __generator } from "tslib";
import { getEndpointFromInstructions } from "./adaptors/getEndpointFromInstructions";
import { s3Customizations } from "./service-customizations";
export var endpointMiddleware = function (_a) {
    var config = _a.config, instructions = _a.instructions;
    return function (next, context) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var endpoint, authScheme;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, getEndpointFromInstructions(args.input, {
                            getEndpointParameterInstructions: function () {
                                return instructions;
                            },
                        }, __assign({}, config), context)];
                    case 1:
                        endpoint = _c.sent();
                        context.endpointV2 = endpoint;
                        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
                        authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
                        if (authScheme) {
                            context["signing_region"] = authScheme.signingScope;
                            context["signing_service"] = authScheme.signingName;
                        }
                        if (!(config.serviceId === "S3")) return [3, 3];
                        return [4, s3Customizations(config, instructions, args, context)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3: return [2, next(__assign({}, args))];
                }
            });
        }); };
    };
};
